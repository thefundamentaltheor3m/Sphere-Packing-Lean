import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.InnerProductSpace.Calculus
import Mathlib.Data.Real.CompleteField
import Mathlib.Topology.MetricSpace.Polish

import SpherePacking.ForMathlib.PoissonSummation.Zn_to_Euclidean

/-!
# Some Facts about Schwartz Functions

In this file, we prove some useful facts about Schwartz Functions. It is possible that some of them
apply to cases more general than just ‚Ñù-vector spaces, but we do not worry about that here.

## Main Definitions
1. `linearEquiv_of_linearEquiv_domain` : Given a linear equivalence between finite-dimensional real
   vector spaces, composition with this equivalence gives a continuous linear equivalence
   between any two Schwartz spaces that have these equivalent spaces for a domain.
2. `SchwartzMap_one_of_SchwartzMap_two` : Given a Schwartz function in two variables, we can
   consider it as a Schwartz function in one variable by fixing a coordinate. The action of mapping
   the Schwartz function in two variables to the Schwartz function in one variable is continuous
   and linear.
-/

open SchwartzMap

open Real Complex BigOperators SchwartzMap Function PiLp
open LinearMap LinearEquiv ContinuousLinearEquiv ContinuousLinearMap

variable {E F H : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [FiniteDimensional ‚Ñù F]
variable [NormedAddCommGroup H] [NormedSpace ‚Ñù H] [FiniteDimensional ‚Ñù H]

-- In finite-dimensional spaces, any linear equivalence is a continuous linear equivalence.
example (eq : E ‚âÉ‚Çó[‚Ñù] H) : E ‚âÉL[‚Ñù] H := eq.toContinuousLinearEquiv

namespace SchwartzMap

section Equivalence

#check compCLMOfContinuousLinearEquiv

/-- Given a linear equivalence between finite-dimensional real vector spaces, composition on the
left with this equivalence gives a continuous linear isomorphism between any two Schwartz spaces
that have these equivalent spaces for a domain. -/
def linearEquiv_of_linearEquiv_domain (eq_l : E ‚âÉ‚Çó[‚Ñù] H) : ùì¢(H, F) ‚âÉL[‚Ñù] ùì¢(E, F) where
  toFun := compCLMOfContinuousLinearEquiv ‚Ñù eq_l.toContinuousLinearEquiv
  invFun := compCLMOfContinuousLinearEquiv ‚Ñù eq_l.symm.toContinuousLinearEquiv
  left_inv := by intro f; ext x; simp
  right_inv := by intro f; ext x; simp
  map_add' := (compCLMOfContinuousLinearEquiv ‚Ñù eq_l.toContinuousLinearEquiv).map_add'
  map_smul' := (compCLMOfContinuousLinearEquiv ‚Ñù eq_l.toContinuousLinearEquiv).map_smul'

end Equivalence

noncomputable section Inductive_Dimensions

/-!
In this section, we explore Schwartzness in the different variables of a multivariable Schwartz
function. The theory in this section would be necessary for an inductive proof of Poisson Summation
Formula over the canonical lattice `‚Ñ§^n`, which is used to prove the result for other lattices.
-/

-- The key ingredient we use is the following.
#check SchwartzMap.compCLMOfAntilipschitz
-- We therefore construct a map from `Euc(1)` to `Euc(2)` that is antilipschitz and has temperate
-- growth. We inform our construction by the fact that the map we desire on the Schwartz spaces is
-- precisely given by composing with this map.

-- We begin by remarking that we can identify `Euc(1)` with `‚Ñù` continuously and linearly.
example : Euc(1) ‚âÉL[‚Ñù] ‚Ñù := ContinuousLinearEquiv.funUnique (Fin 1) ‚Ñù ‚Ñù

/-- The family of embeddings of `Euc(1)` into `Euc(2)` by fixing a coordinate, indexed by elements
of ‚Ñù. The subscripts indicate it is an embedding of `Euc(1)` into `Euc(2)`. -/
def coordinateEmbedding‚ÇÅ‚ÇÇ (x : ‚Ñù) : Euc(1) ‚Üí Euc(2) :=
  fun y => !‚ÇÇ[x, ContinuousLinearEquiv.funUnique (Fin 1) ‚Ñù ‚Ñù (y)]

-- This was less trivial to prove than I thought... coordinates really are clunky!
/-- `coordinateEmbedding‚ÇÅ‚ÇÇ` is injective. -/
theorem coordinateEmbedding‚ÇÅ‚ÇÇ_injective (x : ‚Ñù) : (coordinateEmbedding‚ÇÅ‚ÇÇ x).Injective := by
  intro y‚ÇÅ y‚ÇÇ h
  simp only [coordinateEmbedding‚ÇÅ‚ÇÇ, coe_funUnique, eval, Fin.default_eq_zero, Fin.isValue,
    EmbeddingLike.apply_eq_iff_eq] at h
  have : !‚ÇÇ[x, y‚ÇÅ 0] 1 = !‚ÇÇ[x, y‚ÇÇ 0] 1 := by rw [h]
  simp only [Nat.succ_eq_add_one, Nat.reduceAdd, Fin.isValue, Matrix.cons_val_one,
    Matrix.head_cons] at this
  ext i
  rw [Fin.fin_one_eq_zero i]
  exact this

/-- `coordinateEmbedding‚ÇÅ‚ÇÇ` is smooth. -/
theorem coordinateEmbedding‚ÇÅ‚ÇÇ_smooth (x : ‚Ñù) : ContDiff ‚Ñù ‚ä§ (coordinateEmbedding‚ÇÅ‚ÇÇ x) := by
  rw [contDiff_euclidean]
  intro i
  simp only [coordinateEmbedding‚ÇÅ‚ÇÇ, coe_funUnique, eval, Fin.default_eq_zero, Fin.isValue,
    WithLp.equiv_symm_pi_apply]
  if hi‚ÇÄ : i = 0 then
  ¬∑ rw [hi‚ÇÄ]
    simp only [Fin.isValue, Matrix.cons_val_zero]
    exact contDiff_const
  else if hi‚ÇÅ : i = 1 then
  ¬∑ rw [hi‚ÇÅ]
    simp only [Fin.isValue, Matrix.cons_val_one, Matrix.head_cons]
    have : (fun (x : Euc(1)) ‚Ü¶ x 0) = ContinuousLinearEquiv.funUnique (Fin 1) ‚Ñù ‚Ñù := rfl
    stop
    rw [this]
    exact ContinuousLinearEquiv.contDiff _
  else
  ¬∑ induction' i with i hi
    interval_cases i <;> contradiction

-- We first show temperate growth.
#check Function.HasTemperateGrowth

-- We can use the following tool to show temperate growth.
#check Function.HasTemperateGrowth.of_fderiv

-- Note: We can probably do away with the `x` here as I doubt any of the proofs will need it.
/-- The Jacobian of `coordinateEmbedding‚ÇÅ‚ÇÇ x` for all `x : ‚Ñù`. -/
def coordinateEmbedding‚ÇÅ‚ÇÇ_fderiv (x : ‚Ñù) : Euc(1) ‚ÜíL[‚Ñù] Euc(2) where
  toFun := fun y => (ContinuousLinearEquiv.funUnique (Fin 1) ‚Ñù ‚Ñù y) ‚Ä¢ !‚ÇÇ[(0 : ‚Ñù), 1]
  cont := by

    sorry
  map_add' := sorry
  map_smul' := sorry

/-- The Jacobian of `coordinateEmbedding‚ÇÅ‚ÇÇ x` is the constant `!‚ÇÇ[0, 1]`. -/
theorem coordinateEmbedding‚ÇÅ‚ÇÇ_hasDerivAt (x : ‚Ñù) (p : Euc(1)) :
    HasFDerivAt (ùïú := ‚Ñù) (coordinateEmbedding‚ÇÅ‚ÇÇ x) (coordinateEmbedding‚ÇÅ‚ÇÇ_fderiv x) p := by
  sorry

-- We need to use the following to get an expression for the `fderiv` of `coordinateEmbedding‚ÇÅ‚ÇÇ x`.
#check HasFDerivAt.fderiv

/-- The Jacobian of `coordinateEmbedding‚ÇÅ‚ÇÇ` has temperate growth. -/
theorem fderiv_coordinateEmbedding‚ÇÅ‚ÇÇ_hasTemperateGrowth (x : ‚Ñù) :
    Function.HasTemperateGrowth (fderiv ‚Ñù (coordinateEmbedding‚ÇÅ‚ÇÇ x)) := by
  constructor
  ¬∑ sorry
  ¬∑ sorry

example {a b : ‚Ñù} : 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí (a ‚â§ b ‚Üî a ^ 2 ‚â§ b ^ 2) := by
  exact fun a_1 a_2 ‚Ü¶ Iff.symm (sq_le_sq‚ÇÄ a_1 a_2)

/-- `coordinateEmbedding‚ÇÅ‚ÇÇ` has temperate growth. -/
theorem coordinateEmbedding‚ÇÅ‚ÇÇ_hasTemperateGrowth (x : ‚Ñù) :
    (coordinateEmbedding‚ÇÅ‚ÇÇ x).HasTemperateGrowth := by
  refine Function.HasTemperateGrowth.of_fderiv (fderiv_coordinateEmbedding‚ÇÅ‚ÇÇ_hasTemperateGrowth x)
    ((coordinateEmbedding‚ÇÅ‚ÇÇ_smooth x).differentiable le_top) (k := 1) (C := max ‚Äñx‚Äñ 1) ?_
  intro y
  simp only [coordinateEmbedding‚ÇÅ‚ÇÇ, coe_funUnique, eval, Fin.default_eq_zero, Fin.isValue,
    ENNReal.toReal_ofNat, Nat.ofNat_pos, norm_eq_sum, WithLp.equiv_symm_pi_apply, Real.norm_eq_abs,
    rpow_two, _root_.sq_abs, Fin.sum_univ_two, Matrix.cons_val_zero, Matrix.cons_val_one,
    Matrix.head_cons, one_div, Finset.univ_unique, Finset.sum_singleton, pow_one]

  sorry

-- Next, we show the antilipschitz condition. This is significantly easier.
#check AntilipschitzWith

/-- `coordinateEmbedding‚ÇÅ‚ÇÇ` is `AntilipschitzWith 1`. -/
theorem coordinateEmbedding‚ÇÅ‚ÇÇ_antiLipschitzWith (x : ‚Ñù) :
    AntilipschitzWith 1 (coordinateEmbedding‚ÇÅ‚ÇÇ x) := by
  intro a b
  simp only [ENNReal.coe_one, coordinateEmbedding‚ÇÅ‚ÇÇ, coe_funUnique, eval, Fin.default_eq_zero,
    Fin.isValue, one_mul, edist_dist]
  gcongr
  apply le_of_eq
  simp [dist_eq_sum]

/-- A Schwartz function in multiple variables is Schwartz in each variable. (2 variable case) -/
def SchwartzMap_one_of_SchwartzMap_two (x : ‚Ñù) : ùì¢(Euc(2), ‚ÑÇ) ‚ÜíL[‚Ñù] ùì¢(Euc(1), ‚ÑÇ) :=
  SchwartzMap.compCLMOfAntilipschitz ‚Ñù
  (coordinateEmbedding‚ÇÅ‚ÇÇ_hasTemperateGrowth x)
    (coordinateEmbedding‚ÇÅ‚ÇÇ_antiLipschitzWith x)

end Inductive_Dimensions
