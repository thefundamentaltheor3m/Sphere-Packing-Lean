import Mathlib.Algebra.Module.ZLattice.Basic
import Mathlib.LinearAlgebra.BilinearForm.DualLattice

/-!
# The Dual Lattice

In this file, we build some basic theory about the dual lattice of a given `ZLattice`. We build on
API developed by Andrew Yang in `Mathlib.LinearAlgebra.BilinearForm.DualLattice`. We show that the
dual lattice with respect to a nondegenerate bilinear form on a lattice is itself a lattice, which
will allow us to construct an isomorphism with the canonical free ‚Ñ§-module of its rank.

Note that parts of this file can probably be generalised to `RCLike ùïú`. We do not do this here.

## Main Definition
`ZLattice.Dual`: The dual of a `ZLattice` as a ‚Ñ§-submodule.

## Main Results
1. `ZLattice.Dual.eq_Zspan` : The dual of a `ZLattice` is the ‚Ñ§-span of its associated dual basis.
2. `ZLattice.Dual.instZLattice` : The dual of a `ZLattice` is itself a `ZLattice`.
-/

open LinearMap (BilinForm)
open ZLattice Submodule LinearMap

variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
variable (B : BilinForm ‚Ñù E) (hB : B.Nondegenerate)
variable (Œõ : Submodule ‚Ñ§ E) [hdiscrete : DiscreteTopology Œõ] [hlattice : IsZLattice ‚Ñù Œõ]

section Preliminaries

end Preliminaries

/-- The dual of a `ZLattice` is its dual as a ‚Ñ§-submodule. -/
noncomputable def ZLattice.Dual : Submodule ‚Ñ§ E := LinearMap.BilinForm.dualSubmodule B Œõ

namespace ZLattice.Dual

section ZSpan

variable {Œπ : Type*} [DecidableEq Œπ] [Fintype Œπ] (b : Basis Œπ ‚Ñ§ Œõ)

/-- The dual of a `ZLattice` is the `‚Ñ§`-span of the dual basis of its `ofZLatticeBasis`. -/
theorem eq_ZSpan : Dual B Œõ = span ‚Ñ§ (Set.range (B.dualBasis hB (b.ofZLatticeBasis ‚Ñù))) := by
  simp only [‚Üê Basis.ofZLatticeBasis_span ‚Ñù Œõ b]
  exact BilinForm.dualSubmodule_span_of_basis B hB (b.ofZLatticeBasis ‚Ñù)

end ZSpan

section ZLattice

/-
Note that #lint fails on this file because the following results have "arguments that are not
instance-implicit and do not appear in another instance-implicit argument or the return type."

I don't see a way around this...
-/

include hB in
/-- The dual of a `ZLattice` has the discrete topology. -/
instance instDiscreteTopology : DiscreteTopology (Dual B Œõ) := by
  rw [eq_ZSpan B hB Œõ (Module.Free.chooseBasis ‚Ñ§ Œõ)]
  -- infer_instance
  exact ZSpan.instDiscreteTopologySubtypeMemSubmoduleIntSpanRangeCoeBasisRealOfFinite
    (B.dualBasis hB (Basis.ofZLatticeBasis ‚Ñù Œõ (Module.Free.chooseBasis ‚Ñ§ ‚Ü•Œõ)))

include hB in
/-- The dual of a `ZLattice` is itself a `ZLattice`. -/
instance instIsZLattice [DiscreteTopology (Dual B Œõ)] : IsZLattice ‚Ñù (Dual B Œõ) := by
  simp only [eq_ZSpan B hB Œõ (Module.Free.chooseBasis ‚Ñ§ Œõ)]
  -- infer_instance
  exact instIsZLatticeRealSpan (B.dualBasis hB (Basis.ofZLatticeBasis ‚Ñù Œõ (Module.Free.chooseBasis ‚Ñ§ ‚Ü•Œõ)))

end ZLattice

end ZLattice.Dual
