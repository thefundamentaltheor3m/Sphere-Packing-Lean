/-
Copyright (c) 2025 Sidharth Hariharan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sidharth Hariharan

M4R File
-/

import Mathlib

import SpherePacking.MagicFunction.PolyFourierCoeffBound
import SpherePacking.MagicFunction.a.Basic
import SpherePacking.Tactic.NormNumI

/-! # Constructing Upper-Bounds for I‚ÇÜ

The purpose of this file is to construct bounds on the integral `I‚ÇÜ` that is part of the definition
of the function `a`. We follow the proof of Proposition 7.8 in the blueprint.

## TODO:
- [ ] Integrability of `g` and `C‚ÇÄ * rexp (-2 * œÄ * s) * rexp (-œÄ * r / s)`
-/

open MagicFunction.a.Parametrisations MagicFunction.a.RealIntegrals
  MagicFunction.a.RadialFunctions MagicFunction.PolyFourierCoeffBound
open Complex Real Set MeasureTheory MeasureTheory.Measure Filter intervalIntegral
open scoped Function UpperHalfPlane

namespace MagicFunction.a.IntegralEstimates.I‚ÇÜ

variable (r : ‚Ñù)

section Setup

noncomputable def g : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun r t ‚Ü¶ I
  * œÜ‚ÇÄ'' (I * t)
  * cexp (-œÄ * r * t)

lemma I‚ÇÜ'_eq_integral_g_Ioo (r : ‚Ñù) : I‚ÇÜ' r = 2 * ‚à´ t in Ici (1 : ‚Ñù), g r t := by simp [I‚ÇÜ'_eq, g]

end Setup

----------------------------------------------------------------

section Bounding

section Bounding_Integrand

lemma I‚ÇÜ'_bounding_aux_1 (r : ‚Ñù) : ‚àÄ t ‚àà Ici 1, ‚Äñg r t‚Äñ = ‚ÄñœÜ‚ÇÄ'' (I * t)‚Äñ * rexp (-œÄ * r * t) := by
  simp [g, neg_mul, Complex.norm_mul, norm_I, one_mul, norm_exp]

lemma I‚ÇÜ'_bounding_aux_2 (r : ‚Ñù) : ‚àÉ C‚ÇÄ > 0, ‚àÄ t ‚àà Ici (1 : ‚Ñù),
    ‚Äñg r t‚Äñ ‚â§ C‚ÇÄ * rexp (-2 * œÄ * t) * rexp (-œÄ * r * t) := by
  obtain ‚ü®C‚ÇÄ, hC‚ÇÄ_pos, hC‚ÇÄ‚ü© := norm_œÜ‚ÇÄ_le -- The `PolyFourierCoeffBound` of `œÜ‚ÇÄ`
  use C‚ÇÄ, hC‚ÇÄ_pos
  intro t ht
  rw [I‚ÇÜ'_bounding_aux_1 r t ht]
  rw [mem_Ici] at ht
  gcongr
  have him : (I * t).im = t := by simp
  have hpos : 0 < (I * t).im := by rw [him]; linarith
  have h_half_lt_one : 1 / 2 < (I * t).im := by rw [him]; linarith
  let z : ‚Ñç := ‚ü®I * t, hpos‚ü©
  have him' : z.im = t := him
  specialize hC‚ÇÄ z h_half_lt_one
  simp only [œÜ‚ÇÄ'', hpos, ‚ÜìreduceDIte]
  simp only [him'] at hC‚ÇÄ
  exact hC‚ÇÄ

end Bounding_Integrand

section Integrability

lemma Bound_integrableOn (r C‚ÇÄ : ‚Ñù) (hC‚ÇÄ_pos : C‚ÇÄ > 0)
  (hC‚ÇÄ : ‚àÄ t ‚àà Ici 1, ‚Äñg r t‚Äñ ‚â§ C‚ÇÄ * rexp (-2 * œÄ * t) * rexp (-œÄ * r * t)) :
  IntegrableOn (fun t ‚Ü¶ C‚ÇÄ * rexp (-2 * œÄ * t) * rexp (-œÄ * r * t)) (Ici (1 : ‚Ñù)) volume := sorry

end Integrability

section Bounding_Integral

lemma I‚ÇÜ'_bounding_aux_3 (r : ‚Ñù) : ‚àÉ C‚ÇÄ > 0,
    ‚à´ t in Ici (1 : ‚Ñù), ‚Äñg r t‚Äñ ‚â§
    ‚à´ t in Ici (1 : ‚Ñù), C‚ÇÄ * rexp (-2 * œÄ * t) * rexp (-œÄ * r * t) := by
  wlog hint : IntegrableOn (fun t ‚Ü¶ ‚Äñg r t‚Äñ) (Ici (1 : ‚Ñù)) volume
  ¬∑ refine ‚ü®1, by positivity, ?_‚ü©
    haveI h‚ÇÅ : CompleteSpace ‚Ñù := inferInstance
    have h‚ÇÇ : ¬¨ (Integrable (fun t ‚Ü¶ ‚Äñg r t‚Äñ) (volume.restrict (Ici 1))) := hint
    conv_lhs => simp only [integral, h‚ÇÅ, h‚ÇÇ, ‚ÜìreduceDIte]
    positivity
  obtain ‚ü®C‚ÇÄ, hC‚ÇÄ_pos, hC‚ÇÄ‚ü© := I‚ÇÜ'_bounding_aux_2 r
  use C‚ÇÄ, hC‚ÇÄ_pos
  exact setIntegral_mono_on hint (Bound_integrableOn r C‚ÇÄ hC‚ÇÄ_pos hC‚ÇÄ) measurableSet_Ici hC‚ÇÄ

theorem I‚ÇÜ'_bounding (r : ‚Ñù) : ‚àÉ C‚ÇÅ > 0,
    ‚ÄñI‚ÇÜ' r‚Äñ ‚â§ ‚à´ t in Ici (1 : ‚Ñù), C‚ÇÅ * rexp (-2 * œÄ * t) * rexp (-œÄ * r * t) := by
  obtain ‚ü®C‚ÇÄ, hC‚ÇÄ_pos, hC‚ÇÄ‚ü© := I‚ÇÜ'_bounding_aux_3 r
  refine ‚ü®2 * C‚ÇÄ, by positivity, ?_‚ü©
  calc
  _ = ‚Äñ2 * ‚à´ t in Ici (1 : ‚Ñù), g r t‚Äñ := by simp only [I‚ÇÜ'_eq_integral_g_Ioo, g]
  _ ‚â§ 2 * ‚à´ t in Ici (1 : ‚Ñù), ‚Äñg r t‚Äñ := by
      simp only [norm_mul, norm_two, Complex.norm_ofNat, Nat.ofNat_pos, mul_le_mul_left]
      exact norm_integral_le_integral_norm (g r)
  _ ‚â§ 2 * ‚à´ t in Ici (1 : ‚Ñù), C‚ÇÄ * rexp (-2 * œÄ * t) * rexp (-œÄ * r * t) := by gcongr
  _ = _ := by
      rw [‚Üê smul_eq_mul, ‚Üê MeasureTheory.integral_smul (2 : ‚Ñù)]
      congr; ext t
      rw [smul_eq_mul]
      ac_rfl

theorem I‚ÇÜ'_bounding_eq (r : ‚Ñù) : ‚àÉ C‚ÇÇ > 0,
    ‚ÄñI‚ÇÜ' r‚Äñ ‚â§ C‚ÇÇ * rexp (-œÄ * (r ^ 2 + 2)) / (r ^ 2 + 2) := by
  obtain ‚ü®C‚ÇÅ, hC‚ÇÅ_pos, hC‚ÇÅ‚ü© := I‚ÇÜ'_bounding r
  use C‚ÇÅ, hC‚ÇÅ_pos
  apply le_of_le_of_eq hC‚ÇÅ
  calc
  _ = ‚à´ t in Ici (1 : ‚Ñù), C‚ÇÅ * rexp ((-2 * œÄ - œÄ * r) * t) := by
      congr; ext t
      rw [mul_assoc, sub_mul, sub_eq_add_neg, Real.exp_add]
      simp
  _ = _ := sorry

end Bounding_Integral

end Bounding

----------------------------------------------------------------

section Higher_iteratedFDerivs



end Higher_iteratedFDerivs

----------------------------------------------------------------

noncomputable section Schwartz_Decay

open SchwartzMap

section Zeroth_Derivative

theorem decay'‚ÇÄ : ‚àÄ (k : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù), ‚Äñx‚Äñ ^ k * ‚ÄñI‚ÇÜ' x‚Äñ ‚â§ C := by

  sorry

end Zeroth_Derivative

section Higher_iteratedFDerivs

theorem decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù), ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÜ' x‚Äñ ‚â§ C := by

  sorry

end Higher_iteratedFDerivs

-- def I‚ÇÜ'_Schwartz : ùì¢(‚Ñù, ‚ÑÇ) where
--   toFun := I‚ÇÜ'
--   smooth' := sorry
--   decay' := by extract_goal; sorry

end Schwartz_Decay
