/-
Copyright (c) 2025 Sidharth Hariharan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sidharth Hariharan

M4R File
-/

import SpherePacking.MagicFunction.PolyFourierCoeffBound
import SpherePacking.MagicFunction.a.Basic

/-! # Constructing Upper-Bounds for I‚ÇÇ

The purpose of this file is to construct bounds on the integral `I‚ÇÇ` that is part of the definition
of the function `a`. We follow the proof of Proposition 7.8 in the blueprint.

## TODO:
- Integrability of `g` and `C‚ÇÄ * rexp (-2 * œÄ * s) * rexp (-œÄ * r / s)`
-/

open MagicFunction.a.Parametrisations MagicFunction.a.RealIntegrals
  MagicFunction.a.RadialFunctions MagicFunction.PolyFourierCoeffBound
open Complex Real Set MeasureTheory MeasureTheory.Measure Filter intervalIntegral
open scoped Function UpperHalfPlane

namespace MagicFunction.a.IntegralEstimates.I‚ÇÇ

variable (r : ‚Ñù)

section Setup

noncomputable def g : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun r t ‚Ü¶ œÜ‚ÇÄ'' (-1 / (t + I))
    * (t + I) ^ 2
    * cexp (-œÄ * I * r)
    * cexp (œÄ * I * r * t)
    * cexp (-œÄ * r)

lemma I‚ÇÇ'_eq_integral_g_Ioo (r : ‚Ñù) : I‚ÇÇ' r = ‚à´ t in Ioo (0 : ‚Ñù) 1, g r t := by
  simp only [I‚ÇÇ'_eq, neg_mul, intervalIntegral_eq_integral_uIoc, zero_le_one, ‚ÜìreduceIte,
    uIoc_of_le, one_smul, g, integral_Ioc_eq_integral_Ioo]

end Setup

----------------------------------------------------------------

section Bounding

section Bounding_Integrand

lemma I‚ÇÇ'_bounding_aux_1 (r : ‚Ñù) : ‚àÄ t ‚àà Ioo (0 : ‚Ñù) 1, ‚Äñg r t‚Äñ ‚â§
    ‚ÄñœÜ‚ÇÄ'' (-1 / (t + I))‚Äñ * 2 * rexp (-œÄ * r) := by
  intro t ht
  obtain ‚ü®ht‚ÇÄ, ht‚ÇÅ‚ü© := ht
  rw [g, norm_mul, norm_mul, norm_mul, mul_assoc, mul_assoc, norm_mul]
  gcongr
  ¬∑ rw [norm_pow, ‚Üê normSq_eq_norm_sq, normSq_apply, add_re, ofReal_re, I_re, add_zero, add_im,
      ofReal_im, I_im, zero_add, mul_one]
    nlinarith
  ¬∑ conv_rhs => rw [‚Üê one_mul (rexp _), ‚Üê one_mul (rexp _)]
    gcongr <;> apply le_of_eq
    ¬∑ calc
      _ = ‚Äñcexp (((-œÄ * r : ‚Ñù) : ‚ÑÇ) * I)‚Äñ := by congr 2; push_cast; ac_rfl
      _ = 1 := norm_exp_ofReal_mul_I (-œÄ * r)
    ¬∑ calc
      _ = ‚Äñcexp (((œÄ * r * t : ‚Ñù) : ‚ÑÇ) * I)‚Äñ := by congr 2; push_cast; ac_rfl
      _ = 1 := norm_exp_ofReal_mul_I (œÄ * r * t)
    ¬∑ rw [norm_exp]
      simp

lemma parametrisation_eq : ‚àÄ t ‚àà Ioo (0 : ‚Ñù) 1,
    (-1 / (‚Üët + I)) = -t / (t ^ 2 + 1) + (1 / (t ^ 2 + 1) * I) := by
  intro t ht
  obtain ‚ü®ht‚ÇÄ, ht‚ÇÅ‚ü© := ht
  calc
  _ = (-1 / (t + I)) * ((t - I) / (t - I)) := by
      conv_lhs => rw [‚Üê mul_one (-1 / (t + I))]
      congr; symm
      apply div_self
      intro h
      conv at h => rw [sub_eq_zero]
      -- This has to be the most ridiculous proof ever. It should never have to go down to 0 ‚â† 1 :(
      have h‚ÇÅ : (ofReal t).im = 0 := ofReal_im t
      have h‚ÇÇ : (ofReal t).im = 1 := by rw [h]; exact I_im
      exact zero_ne_one ((h‚ÇÅ.symm).trans h‚ÇÇ)
  _ = _ := by
      conv_lhs => rw [div_mul_div_comm (-1) (t + I)]
      simp only [neg_mul, one_mul, neg_sub, div_mul_eq_mul_div, div_add_div_same]
      congr
      ¬∑ ac_rfl
      ¬∑ ring_nf
        rw [I_sq]
        ring

lemma im_parametrisation_eq : ‚àÄ t ‚àà Ioo (0 : ‚Ñù) 1, (-1 / (‚Üët + I)).im = 1 / (t ^ 2 + 1) := by
  intro t ht
  conv_lhs => rw [parametrisation_eq t ht, add_im]
  norm_cast
  rw [zero_add, mul_I_im, ofReal_re]

lemma im_parametrisation_lower : ‚àÄ t ‚àà Ioo (0 : ‚Ñù) 1, 1 / 2 < (-1 / (‚Üët + I)).im := by
  intro t ht
  have hpos : 0 < t ^ 2 + 1 := by positivity
  rw [im_parametrisation_eq t ht, one_div, one_div, inv_lt_inv‚ÇÄ two_pos hpos]
  obtain ‚ü®ht‚ÇÄ, ht‚ÇÅ‚ü© := ht
  nlinarith

lemma im_parametrisation_upper : ‚àÄ t ‚àà Ioo (0 : ‚Ñù) 1, (-1 / (‚Üët + I)).im < 1 := by
  intro t ht
  rw [im_parametrisation_eq t ht, one_div, ‚Üê inv_one, inv_lt_inv‚ÇÄ]
  obtain ‚ü®ht‚ÇÄ, ht‚ÇÅ‚ü© := ht
  ¬∑ simp_all only [inv_one, lt_add_iff_pos_left, pow_pos]
  ¬∑ positivity
  ¬∑ exact one_pos

lemma I‚ÇÇ'_bounding_aux_2 (r : ‚Ñù) : ‚àÉ C‚ÇÄ > 0, ‚àÄ t ‚àà Ioo (0 : ‚Ñù) 1,
    ‚Äñg r t‚Äñ ‚â§ C‚ÇÄ * rexp (-2 * œÄ * (-1 / (t + I)).im) * 2 * rexp (-œÄ * r) := by
  obtain ‚ü®C‚ÇÄ, hC‚ÇÄ_pos, hC‚ÇÄ‚ü© := norm_œÜ‚ÇÄ_le -- The `PolyFourierCoeffBound` of `œÜ‚ÇÄ`
  use C‚ÇÄ, hC‚ÇÄ_pos
  intro t ht
  apply (I‚ÇÇ'_bounding_aux_1 r t ht).trans
  gcongr
  have him : 1 / 2 < (-1 / (‚Üët + I)).im := im_parametrisation_lower t ht
  have hpos : 0 < (-1 / (‚Üët + I)).im := one_half_pos.trans him
  let z : ‚Ñç := ‚ü®-1 / (t + I), hpos‚ü©
  specialize hC‚ÇÄ z him
  simp only [œÜ‚ÇÄ'', hpos, ‚ÜìreduceDIte]
  exact hC‚ÇÄ

lemma I‚ÇÇ'_bounding_aux_3 (r : ‚Ñù) :  ‚àÉ C‚ÇÄ > 0, ‚àÄ t ‚àà Ioo (0 : ‚Ñù) 1,
    ‚Äñg r t‚Äñ ‚â§ C‚ÇÄ * rexp (-œÄ) * 2 * rexp (-œÄ * r) := by
  obtain ‚ü®C‚ÇÄ, hC‚ÇÄ_pos, hC‚ÇÄ‚ü© := I‚ÇÇ'_bounding_aux_2 r -- The `PolyFourierCoeffBound` of `œÜ‚ÇÄ`
  use C‚ÇÄ, hC‚ÇÄ_pos
  intro t ht
  apply (hC‚ÇÄ t ht).trans
  gcongr
  simp only [neg_mul, neg_le_neg_iff]
  conv_rhs => rw [mul_comm 2 œÄ]
  have hcalc : œÄ = œÄ * 2 * (1 / 2) := by simp
  conv_lhs => rw [hcalc]
  gcongr
  exact le_of_lt <| im_parametrisation_lower t ht

end Bounding_Integrand

section Integrability

lemma Bound_integrableOn (r C‚ÇÄ : ‚Ñù) :
    IntegrableOn (fun _ ‚Ü¶ C‚ÇÄ * rexp (-œÄ) * 2 * rexp (-œÄ * r)) (Ioo (0 : ‚Ñù) 1) volume := by
  rw [integrableOn_const_iff]
  right
  exact measure_Ioo_lt_top

end Integrability

section Bounding_Integral

lemma I‚ÇÇ'_bounding_aux_4 (r : ‚Ñù) :  ‚àÉ C‚ÇÄ > 0,
    ‚à´ t in Ioo (0 : ‚Ñù) 1, ‚Äñg r t‚Äñ ‚â§ ‚à´ _ in Ioo (0 : ‚Ñù) 1, C‚ÇÄ * rexp (-œÄ) * 2 * rexp (-œÄ * r) := by
  wlog hint : IntegrableOn (fun t ‚Ü¶ ‚Äñg r t‚Äñ) (Ioo (0 : ‚Ñù) 1) volume
  ¬∑ refine ‚ü®1, by positivity, ?_‚ü©
    haveI h‚ÇÅ : CompleteSpace ‚Ñù := inferInstance
    have h‚ÇÇ : ¬¨ (Integrable (fun t ‚Ü¶ ‚Äñg r t‚Äñ) (volume.restrict (Ioo (0 : ‚Ñù) 1))) := hint
    conv_lhs => simp only [integral, h‚ÇÅ, h‚ÇÇ, ‚ÜìreduceDIte]
    positivity
  obtain ‚ü®C‚ÇÄ, hC‚ÇÄ_pos, hC‚ÇÄ‚ü© := I‚ÇÇ'_bounding_aux_3 r
  use C‚ÇÄ, hC‚ÇÄ_pos
  exact setIntegral_mono_on hint (Bound_integrableOn r C‚ÇÄ) measurableSet_Ioo hC‚ÇÄ

theorem I‚ÇÇ'_bounding (r : ‚Ñù) : ‚àÉ C‚ÇÅ > 0, ‚ÄñI‚ÇÇ' r‚Äñ ‚â§ C‚ÇÅ * rexp (-œÄ * r) := by
  obtain ‚ü®C‚ÇÄ, hC‚ÇÄ_pos, hC‚ÇÄ‚ü© := I‚ÇÇ'_bounding_aux_4 r
  refine ‚ü®C‚ÇÄ * rexp (-œÄ) * 2, by positivity, ?_‚ü©
  calc
  _ = ‚Äñ‚à´ t in Ioo (0 : ‚Ñù) 1, g r t‚Äñ := by rw [I‚ÇÇ'_eq_integral_g_Ioo]
  _ ‚â§ ‚à´ t in Ioo (0 : ‚Ñù) 1, ‚Äñg r t‚Äñ := norm_integral_le_integral_norm (g r)
  _ ‚â§ ‚à´ _ in Ioo (0 : ‚Ñù) 1, C‚ÇÄ * rexp (-œÄ) * 2 * rexp (-œÄ * r) := hC‚ÇÄ
  _ = _ := by simp

-- The following may be useful:
-- #check MeasureTheory.integral_mono_of_nonneg -- integrability can't be avoided...
-- #check MeasureTheory.setLIntegral_mono
-- #check MeasureTheory.setIntegral_mono_on

end Bounding_Integral

end Bounding

----------------------------------------------------------------

section Higher_iteratedFDerivs



end Higher_iteratedFDerivs

----------------------------------------------------------------

noncomputable section Schwartz_Decay

open SchwartzMap

section Zeroth_Derivative

theorem decay'‚ÇÄ : ‚àÄ (k : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù), ‚Äñx‚Äñ ^ k * ‚ÄñI‚ÇÇ' x‚Äñ ‚â§ C := by

  sorry

end Zeroth_Derivative

section Higher_iteratedFDerivs

theorem decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù), ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÇ' x‚Äñ ‚â§ C := by

  sorry

end Higher_iteratedFDerivs

-- def I‚ÇÇ'_Schwartz : ùì¢(‚Ñù, ‚ÑÇ) where
--   toFun := I‚ÇÇ'
--   smooth' := sorry
--   decay' := by extract_goal; sorry

end Schwartz_Decay
