/-
Copyright (c) 2025 Sidharth Hariharan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sidharth Hariharan

M4R File
-/

import SpherePacking.ForMathlib.RadialSchwartz
import SpherePacking.MagicFunction.a.Basic

/-! # `a` is a Schwartz Function

The purpose of this file is to prove that `a` is a Schwartz function. It collects results stated elsewhere and presents them concisely.
-/

open MagicFunction MagicFunction.a MagicFunction.a.RadialFunctions MagicFunction.a.RealIntegrals
  MagicFunction.a.Parametrisations

open Set Complex Real SchwartzMap

open scoped ContDiff

namespace MagicFunction.a.SchwartzProperties

section Smooth

/-! # `a` is smooth.

There is no reference for this in the blueprint. The idea is to use integrability to differentiate
inside the integrals.
-/

theorem I‚ÇÅ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÅ' := by
  sorry

theorem I‚ÇÇ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÇ' := by
  sorry

theorem I‚ÇÉ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÉ' := by
  sorry

theorem I‚ÇÑ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÑ' := by
  sorry

theorem I‚ÇÖ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÖ' := by
  sorry

theorem I‚ÇÜ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÜ' := by
  sorry

end Smooth

section Decay

/-! # `a` decays faster than any inverse power of the norm squared.

We follow the proof of Proposition 7.8 in the blueprint.
-/

theorem I‚ÇÅ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.I‚ÇÅ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÇ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.I‚ÇÇ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÉ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.I‚ÇÉ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÑ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÑ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÖ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÖ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÜ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÜ' x‚Äñ ‚â§ C := by
  sorry

end Decay

end MagicFunction.a.SchwartzProperties

noncomputable section SchwartzMap

namespace MagicFunction.a.SchwartzIntegrals

def I‚ÇÅ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.a.RealIntegrals.I‚ÇÅ'
  smooth' := MagicFunction.a.SchwartzProperties.I‚ÇÅ'_smooth'
  decay' := MagicFunction.a.SchwartzProperties.I‚ÇÅ'_decay'

def I‚ÇÇ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.a.RealIntegrals.I‚ÇÇ'
  smooth' := MagicFunction.a.SchwartzProperties.I‚ÇÇ'_smooth'
  decay' := MagicFunction.a.SchwartzProperties.I‚ÇÇ'_decay'

def I‚ÇÉ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.a.RealIntegrals.I‚ÇÉ'
  smooth' := MagicFunction.a.SchwartzProperties.I‚ÇÉ'_smooth'
  decay' := MagicFunction.a.SchwartzProperties.I‚ÇÉ'_decay'

def I‚ÇÑ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.a.RealIntegrals.I‚ÇÑ'
  smooth' := MagicFunction.a.SchwartzProperties.I‚ÇÑ'_smooth'
  decay' := MagicFunction.a.SchwartzProperties.I‚ÇÑ'_decay'

def I‚ÇÖ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.a.RealIntegrals.I‚ÇÖ'
  smooth' := MagicFunction.a.SchwartzProperties.I‚ÇÖ'_smooth'
  decay' := MagicFunction.a.SchwartzProperties.I‚ÇÖ'_decay'

def I‚ÇÜ' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.a.RealIntegrals.I‚ÇÜ'
  smooth' := MagicFunction.a.SchwartzProperties.I‚ÇÜ'_smooth'
  decay' := MagicFunction.a.SchwartzProperties.I‚ÇÜ'_decay'

def I‚ÇÅ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) I‚ÇÅ'

def I‚ÇÇ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) I‚ÇÇ'

def I‚ÇÉ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) I‚ÇÉ'

def I‚ÇÑ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) I‚ÇÑ'

def I‚ÇÖ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) I‚ÇÖ'

def I‚ÇÜ : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) :=
  schwartzMap_multidimensional_of_schwartzMap_real (EuclideanSpace ‚Ñù (Fin 8)) I‚ÇÜ'

end MagicFunction.a.SchwartzIntegrals

namespace MagicFunction.FourierEigenfunctions

/-- The radial component of the +1-Fourier Eigenfunction of Viazovska's Magic Function. -/
@[simps!]
def a' : ùì¢(‚Ñù, ‚ÑÇ) :=
    MagicFunction.a.SchwartzIntegrals.I‚ÇÅ'
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÇ'
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÉ'
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÑ'
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÖ'
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÜ'

/-- The +1-Fourier Eigenfunction of Viazovska's Magic Function. -/
@[simps!]
def a : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) := schwartzMap_multidimensional_of_schwartzMap_real
  (EuclideanSpace ‚Ñù (Fin 8)) a'

theorem a_eq_sum_integrals_RadialFunctions : a =
    MagicFunction.a.RadialFunctions.I‚ÇÅ
  + MagicFunction.a.RadialFunctions.I‚ÇÇ
  + MagicFunction.a.RadialFunctions.I‚ÇÉ
  + MagicFunction.a.RadialFunctions.I‚ÇÑ
  + MagicFunction.a.RadialFunctions.I‚ÇÖ
  + MagicFunction.a.RadialFunctions.I‚ÇÜ := rfl

theorem a_eq_sum_integrals_SchwartzIntegrals : a =
    MagicFunction.a.SchwartzIntegrals.I‚ÇÅ
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÇ
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÉ
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÑ
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÖ
  + MagicFunction.a.SchwartzIntegrals.I‚ÇÜ := rfl

theorem a'_eq_sum_RealIntegrals : a' =
    MagicFunction.a.RealIntegrals.I‚ÇÅ'
  + MagicFunction.a.RealIntegrals.I‚ÇÇ'
  + MagicFunction.a.RealIntegrals.I‚ÇÉ'
  + MagicFunction.a.RealIntegrals.I‚ÇÑ'
  + MagicFunction.a.RealIntegrals.I‚ÇÖ'
  + MagicFunction.a.RealIntegrals.I‚ÇÜ' := rfl

end MagicFunction.FourierEigenfunctions

end SchwartzMap
