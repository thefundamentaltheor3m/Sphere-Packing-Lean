/-
Copyright (c) 2025 Sidharth Hariharan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sidharth Hariharan

M4R File
-/

import Mathlib

import SpherePacking.ForMathlib.RadialSchwartz

import SpherePacking.MagicFunction.a.IntegralEstimates.I1

/-! # `a` is a Schwartz Function

The purpose of this file is to prove that `a` is a Schwartz function. We follow the proof of
Proposition 7.8 in the blueprint.
-/

open MagicFunction MagicFunction.a MagicFunction.a.RadialFunctions MagicFunction.a.RealIntegrals
  MagicFunction.a.Parametrisations

open Set Complex Real SchwartzMap

open scoped ContDiff

namespace MagicFunction.a.SchwartzProperties

section Smooth

/-! # `a` is smooth.

There is no reference for this in the blueprint. The idea is to use integrability to differentiate
inside the integrals.
-/

theorem I‚ÇÅ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÅ' := by
  sorry

theorem I‚ÇÇ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÇ' := by
  sorry

theorem I‚ÇÉ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÉ' := by
  sorry

theorem I‚ÇÑ'_smooth' : ContDiff ‚Ñù ‚àû RealIntegrals.I‚ÇÑ' := by
  sorry

theorem smooth' :  ContDiff ‚Ñù ‚àû RealIntegrals.a' :=
  ((I‚ÇÅ'_smooth'.add I‚ÇÇ'_smooth').add I‚ÇÉ'_smooth').add I‚ÇÑ'_smooth'

end Smooth

section Decay

/-! # `a` decays faster than any inverse power of the norm squared.

We follow the proof of Proposition 7.8 in the blueprint.
-/

theorem I‚ÇÅ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.I‚ÇÅ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÇ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.I‚ÇÇ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÉ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.I‚ÇÉ' x‚Äñ ‚â§ C := by
  sorry

theorem I‚ÇÑ'_decay' : ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÑ' x‚Äñ ‚â§ C := by
  sorry

-- [UPDATE] This is completely unnecessary. A better approach (since I'm showing smoothness and
-- decaying for all constituent integrals) is to simply DEFINE CORRESPONDING `SchwartzMap`S AND
-- DEFINE `FourierEigenfunctions.a'` AS THEIR SUM! What I'm doing here and in the corresponding
-- `smooth'` lemma is just an instance of the known fact that the Schwartz space is closed under
-- addition (indeed, it is closed under all linear combinations). This is a hugely inefficient
-- approach!
theorem decay' :  ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ (x : ‚Ñù),
    ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n RealIntegrals.a' x‚Äñ ‚â§ C := by
  -- Not going to fix because going to golf completely anyway
  stop
  intro k n
  obtain ‚ü®C‚ÇÅ, h‚ÇÅ‚ü© := I‚ÇÅ'_decay' k n
  obtain ‚ü®C‚ÇÇ, h‚ÇÇ‚ü© := I‚ÇÇ'_decay' k n
  obtain ‚ü®C‚ÇÉ, h‚ÇÉ‚ü© := I‚ÇÉ'_decay' k n
  obtain ‚ü®C‚ÇÑ, h‚ÇÑ‚ü© := I‚ÇÑ'_decay' k n
  use C‚ÇÅ + C‚ÇÇ + C‚ÇÉ + C‚ÇÑ
  intro x
  specialize h‚ÇÅ x
  specialize h‚ÇÇ x
  specialize h‚ÇÉ x
  specialize h‚ÇÑ x
  have hdiff‚ÇÅ : ContDiff ‚Ñù n I‚ÇÅ' := (contDiff_iff_forall_nat_le.mp I‚ÇÅ'_smooth') n le_top
  have hdiff‚ÇÇ : ContDiff ‚Ñù n I‚ÇÇ' := (contDiff_iff_forall_nat_le.mp I‚ÇÇ'_smooth') n le_top
  have hdiff‚ÇÉ : ContDiff ‚Ñù n I‚ÇÉ' := (contDiff_iff_forall_nat_le.mp I‚ÇÉ'_smooth') n le_top
  have hdiff‚ÇÑ : ContDiff ‚Ñù n I‚ÇÑ' := (contDiff_iff_forall_nat_le.mp I‚ÇÑ'_smooth') n le_top
  calc ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n a' x‚Äñ
  _ = ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ' + I‚ÇÉ' + I‚ÇÑ') x‚Äñ := rfl
  _ = ‚Äñx‚Äñ ^ k * ‚Äñ(iteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ' + I‚ÇÉ') x) + (iteratedFDeriv ‚Ñù n I‚ÇÑ' x)‚Äñ := by
    congr
    exact iteratedFDeriv_add_apply ((hdiff‚ÇÅ.add hdiff‚ÇÇ).add hdiff‚ÇÉ) hdiff‚ÇÑ
  _ ‚â§ ‚Äñx‚Äñ ^ k * (‚ÄñiteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ' + I‚ÇÉ') x‚Äñ + ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÑ' x‚Äñ) := by
    gcongr
    exact ContinuousMultilinearMap.opNorm_add_le (iteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ' + I‚ÇÉ') x)
        (iteratedFDeriv ‚Ñù n I‚ÇÑ' x)
  _ ‚â§ ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ' + I‚ÇÉ') x‚Äñ + C‚ÇÑ := by
    rw [mul_add]
    gcongr
  _ = ‚Äñx‚Äñ ^ k * ‚Äñ(iteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ') x) + (iteratedFDeriv ‚Ñù n I‚ÇÉ' x)‚Äñ + C‚ÇÑ := by
    congr
    exact iteratedFDeriv_add_apply (hdiff‚ÇÅ.add hdiff‚ÇÇ) hdiff‚ÇÉ
  _ ‚â§ ‚Äñx‚Äñ ^ k * (‚ÄñiteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ') x‚Äñ + ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÉ' x‚Äñ) + C‚ÇÑ := by
    gcongr
    exact ContinuousMultilinearMap.opNorm_add_le (iteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ') x)
        (iteratedFDeriv ‚Ñù n I‚ÇÉ' x)
  _ ‚â§ ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (I‚ÇÅ' + I‚ÇÇ') x‚Äñ + C‚ÇÉ + C‚ÇÑ := by
    rw [mul_add]
    gcongr
  _ = ‚Äñx‚Äñ ^ k * ‚Äñ(iteratedFDeriv ‚Ñù n I‚ÇÅ' x) + (iteratedFDeriv ‚Ñù n I‚ÇÇ' x)‚Äñ + C‚ÇÉ + C‚ÇÑ := by
    congr
    exact iteratedFDeriv_add_apply hdiff‚ÇÅ hdiff‚ÇÇ
  _ ‚â§ ‚Äñx‚Äñ ^ k * (‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÅ' x‚Äñ + ‚ÄñiteratedFDeriv ‚Ñù n I‚ÇÇ' x‚Äñ) + C‚ÇÉ + C‚ÇÑ := by
    gcongr
    exact ContinuousMultilinearMap.opNorm_add_le (iteratedFDeriv ‚Ñù n I‚ÇÅ' x)
        (iteratedFDeriv ‚Ñù n I‚ÇÇ' x)
  _ ‚â§ C‚ÇÅ + C‚ÇÇ + C‚ÇÉ + C‚ÇÑ := by
    rw [mul_add]
    gcongr

end Decay

end MagicFunction.a.SchwartzProperties

noncomputable section SchwartzMap

namespace MagicFunction.FourierEigenfunctions

/-- The radial component of the +1-Fourier Eigenfunction of Viazovska's Magic Function. -/
@[simps!]
def a' : ùì¢(‚Ñù, ‚ÑÇ) where
  toFun := MagicFunction.a.RealIntegrals.a'
  smooth' := MagicFunction.a.SchwartzProperties.smooth'
  decay' := MagicFunction.a.SchwartzProperties.decay'

/-- The +1-Fourier Eigenfunction of Viazovska's Magic Function. -/
@[simps!]
def a : ùì¢(EuclideanSpace ‚Ñù (Fin 8), ‚ÑÇ) := schwartzMap_multidimensional_of_schwartzMap_real
  (EuclideanSpace ‚Ñù (Fin 8)) a'

end MagicFunction.FourierEigenfunctions

end SchwartzMap
