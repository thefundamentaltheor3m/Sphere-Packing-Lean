import Mathlib.Analysis.Complex.UpperHalfPlane.Manifold
import Mathlib.NumberTheory.ModularForms.CongruenceSubgroups
import Mathlib.NumberTheory.ModularForms.SlashActions

open UpperHalfPlane hiding I

open Real Complex ContinuousMap Matrix CongruenceSubgroup ModularGroup

open scoped Interval Real Topology Manifold ModularForm MatrixGroups

/--
Restrict a function `F : ‚Ñç ‚Üí ‚ÑÇ` to the positive imaginary axis, i.e. `t ‚Ü¶ F (I * t)`.
If $t \le 0$, then `F (I * t)` is not defined, so we return `0` in that case.
-/
noncomputable def ResToImagAxis (F : ‚Ñç ‚Üí ‚ÑÇ) : ‚Ñù ‚Üí ‚ÑÇ :=
  fun t => if ht : 0 < t then F ‚ü®(Complex.I * t), by simp [ht]‚ü© else 0

/--
Function $F : \mathbb{H} \to \mathbb{C}$ whose restriction to the imaginary axis is real-valued.
-/
noncomputable def ResToImagAxisReal (F : ‚Ñç ‚Üí ‚ÑÇ) : Prop :=
  ‚àÉ f : ‚Ñù ‚Üí ‚Ñù, ‚àÄ t : ‚Ñù, ‚àÄ ht : 0 < t, F ‚ü®(Complex.I * t), by simp [ht]‚ü© = f t

/--
Function $F : \mathbb{H} \to \mathbb{C}$ is postive on the imaginary axis.
-/
noncomputable def ResToImagAxisPos (F : ‚Ñç ‚Üí ‚ÑÇ) : Prop :=
  ‚àÄ t : ‚Ñù, 0 < t ‚Üí ‚àÉ r : ‚Ñù, 0 < r ‚àß ResToImagAxis F t = r

/--
Function $F : \mathbb{H} \to \mathbb{C}$ whose restriction to the imaginary axis is eventually
positive, i.e. there exists $t_0 > 0$ such that for all $t \ge t_0$, $F(it)$ is positive.
-/
noncomputable def ResToImagAxisEventuallyPos (F : ‚Ñç ‚Üí ‚ÑÇ) : Prop :=
  ‚àÉ t‚ÇÄ : ‚Ñù, 0 < t‚ÇÄ ‚àß ‚àÄ t : ‚Ñù, t‚ÇÄ ‚â§ t ‚Üí ‚àÉ r : ‚Ñù, 0 < r ‚àß ResToImagAxis F t = r

theorem ResToImagAxisDifferentiable (F : ‚Ñç ‚Üí ‚ÑÇ) (hF : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) F) (t : ‚Ñù)
    (ht : 0 < t) : DifferentiableAt ‚Ñù (ResToImagAxis F) t := by
  sorry

/--
Restriction and slash action under S: $(F |_k S) (it) = t^{-k} * F(it)$
-/
theorem ResToImagAxisSlashActionS (F : ‚Ñç ‚Üí ‚ÑÇ) (k : ‚Ñ§) (t : ‚Ñù)
    (ht : 0 < t) : ResToImagAxis (F ‚à£[k] S) t = Complex.I ^ k * t ^ (-k) * ResToImagAxis F (1 / t)
    := by
  sorry
