import Mathlib.Analysis.Calculus.UniformLimitsDeriv
import Mathlib.Analysis.NormedSpace.FunctionSeries
import Mathlib.Topology.Algebra.Module.ModuleTopology
import Mathlib.Topology.ContinuousMap.Compact
import SpherePacking.ModularForms.exp_lems
import SpherePacking.ModularForms.iteratedderivs


open UpperHalfPlane TopologicalSpace Set
  Metric Filter Function Complex

open scoped Interval Real NNReal ENNReal Topology BigOperators Nat


abbrev ‚Ñç' := {z : ‚ÑÇ | 0 < z.im}

lemma upper_half_plane_isOpen :
    IsOpen ‚Ñç' := by
  apply isOpen_lt (by fun_prop) (by fun_prop)

theorem derivWithin_tsum_fun' {Œ± : Type _} (f : Œ± ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ) {s : Set ‚ÑÇ}
    (hs : IsOpen s) (x : ‚ÑÇ) (hx : x ‚àà s) (hf : ‚àÄ y ‚àà s, Summable fun n : Œ± => f n y)
    (hu :‚àÄ K ‚äÜ s, IsCompact K ‚Üí
          ‚àÉ u : Œ± ‚Üí ‚Ñù, Summable u ‚àß ‚àÄ n (k : K), ‚ÄñderivWithin (f n) s k‚Äñ ‚â§ u n)
    (hf2 : ‚àÄ n (r : s), DifferentiableAt ‚ÑÇ (f n) r) :
    derivWithin (fun z => ‚àë' n : Œ±, f n z) s x = ‚àë' n : Œ±, derivWithin (fun z => f n z) s x := by
  apply HasDerivWithinAt.derivWithin
  apply HasDerivAt.hasDerivWithinAt
  have A :
    ‚àÄ x : ‚ÑÇ,
      x ‚àà s ‚Üí
        Tendsto (fun t : Finset Œ± => ‚àë n ‚àà t, (fun z => f n z) x) atTop
          (ùìù (‚àë' n : Œ±, (fun z => f n z) x)) :=
        fun y hy ‚Ü¶ Summable.hasSum <| hf y hy
  apply hasDerivAt_of_tendstoLocallyUniformlyOn hs _ _ A hx
  use fun n : Finset Œ± => fun a => ‚àë i ‚àà n, derivWithin (fun z => f i z) s a
  rw [tendstoLocallyUniformlyOn_iff_forall_isCompact hs]
  intro K hK1 hK2
  have HU := hu K hK1 hK2
  obtain ‚ü®u, hu1, hu2‚ü© := HU
  apply tendstoUniformlyOn_tsum hu1
  intro n x hx
  apply hu2 n ‚ü®x, hx‚ü©
  filter_upwards
  intro t r hr
  apply HasDerivAt.fun_sum
  intro q hq
  apply HasDerivWithinAt.hasDerivAt
  apply DifferentiableWithinAt.hasDerivWithinAt
  apply (hf2 q ‚ü®r, hr‚ü©).differentiableWithinAt
  exact IsOpen.mem_nhds hs hr
  apply IsOpen.uniqueDiffWithinAt hs hx


theorem der_iter_eq_der_aux2 (k n : ‚Ñï) (r : ‚Ñç') :
  DifferentiableAt ‚ÑÇ
    (fun z : ‚ÑÇ =>
      iteratedDerivWithin k (fun s : ‚ÑÇ => Complex.exp (2 * ‚ÜëœÄ * Complex.I * n * s)) ‚Ñç' z) ‚Üër :=
  by
  have hh :
      DifferentiableOn ‚ÑÇ (fun t => (2 * ‚ÜëœÄ * Complex.I * n) ^ k *
      Complex.exp (2 * ‚ÜëœÄ * Complex.I * n * t)) ‚Ñç' := by
    apply Differentiable.differentiableOn;
    apply Differentiable.const_mul
    apply Differentiable.cexp
    apply Differentiable.const_mul
    apply differentiable_id
  apply DifferentiableOn.differentiableAt
  apply DifferentiableOn.congr hh
  intro x hx
  apply exp_iter_deriv_within k n hx
  refine IsOpen.mem_nhds ?_ ?_
  ¬∑ apply isOpen_lt (by fun_prop) (by fun_prop)
  exact r.2

  theorem der_iter_eq_der2 (k n : ‚Ñï) (r : ‚Ñç') :
    deriv (iteratedDerivWithin k (fun s : ‚ÑÇ => Complex.exp (2 * ‚ÜëœÄ * Complex.I * n * s)) ‚Ñç') ‚Üër =
      derivWithin (iteratedDerivWithin k (fun s : ‚ÑÇ => Complex.exp (2 * ‚ÜëœÄ * Complex.I * n * s)) ‚Ñç')
        ‚Ñç'
        ‚Üër :=
  by
  simp
  apply symm
  apply DifferentiableAt.derivWithin
  apply der_iter_eq_der_aux2
  apply IsOpen.uniqueDiffOn upper_half_plane_isOpen
  apply r.2

  theorem der_iter_eq_der2' (k n : ‚Ñï) (r : ‚Ñç') :
    derivWithin (iteratedDerivWithin k (fun s : ‚ÑÇ => Complex.exp (2 * ‚ÜëœÄ * Complex.I * n * s)) ‚Ñç')
      ‚Ñç' ‚Üër =
      iteratedDerivWithin (k + 1) (fun s : ‚ÑÇ => Complex.exp (2 * ‚ÜëœÄ * Complex.I * n * s)) ‚Ñç' ‚Üër :=
  by
  rw [iteratedDerivWithin_succ]


noncomputable def cts_exp_two_pi_n (K : Set ‚ÑÇ) : ContinuousMap K ‚ÑÇ where
  toFun := fun r : K => Complex.exp (2 * ‚ÜëœÄ * Complex.I * r)


 theorem iter_deriv_comp_bound2 (K : Set ‚ÑÇ) (hK1 : K ‚äÜ ‚Ñç') (hK2 : IsCompact K) (k : ‚Ñï) :
    ‚àÉ u : ‚Ñï ‚Üí ‚Ñù,
      Summable u ‚àß
        ‚àÄ (n : ‚Ñï) (r : K),
        ‚Äñ(derivWithin (iteratedDerivWithin k
          (fun s : ‚ÑÇ => Complex.exp (2 * ‚ÜëœÄ * Complex.I * n * s)) ‚Ñç') ‚Ñç' r)‚Äñ ‚â§ u n := by
  have : CompactSpace K := by
    rw [‚Üê isCompact_univ_iff]
    rw [isCompact_iff_isCompact_univ] at hK2
    apply hK2
  set r : ‚Ñù := ‚ÄñBoundedContinuousFunction.mkOfCompact (cts_exp_two_pi_n K )‚Äñ
  have hr : ‚ÄñBoundedContinuousFunction.mkOfCompact (cts_exp_two_pi_n K )‚Äñ < 1 :=
    by
    rw [BoundedContinuousFunction.norm_lt_iff_of_compact]
    intro x; rw [BoundedContinuousFunction.mkOfCompact_apply]; simp_rw [cts_exp_two_pi_n]
    simp only [ContinuousMap.coe_mk]
    apply exp_upperHalfPlane_lt_one ‚ü®x.1, hK1 x.2‚ü©; linarith
  have hr2 : 0 ‚â§ r := by apply norm_nonneg _
  have hu : Summable fun n : ‚Ñï => ‚Äñ((2 * ‚ÜëœÄ * Complex.I * n) ^ (k + 1) * r ^ n)‚Äñ :=
    by
    have : ‚àÄ (n : ‚Ñï), ((2 * ‚ÜëœÄ)^(k+1))* ‚Äñ((n) ^ (k + 1) * (r ^ n))‚Äñ =
      ‚Äñ((2 * ‚ÜëœÄ * Complex.I * n) ^ (k + 1) * r ^ n)‚Äñ := by
        intro n
        norm_cast
        simp only [Nat.cast_pow, norm_mul, norm_pow, Real.norm_eq_abs,
          ofReal_mul, ofReal_ofNat, ofReal_pow, norm_ofNat, norm_real, norm_I,
          mul_one, norm_natCast]
        norm_cast
        simp only [Nat.cast_pow]
        have hh : |œÄ| = œÄ := by simp [Real.pi_pos.le]
        rw [hh]
        ring
    apply Summable.congr _ this
    rw [summable_mul_left_iff]
    apply summable_norm_pow_mul_geometric_of_norm_lt_one
    convert hr
    rw [norm_norm]
    norm_cast
    apply pow_ne_zero
    apply mul_ne_zero
    linarith
    apply Real.pi_ne_zero
  refine' ‚ü®fun n : ‚Ñï => ‚Äñ((2 * ‚ÜëœÄ * Complex.I * n) ^ (k + 1) * r ^ n)‚Äñ, hu, _‚ü©
  intro n t
  have go := der_iter_eq_der2' k n ‚ü®t.1, hK1 t.2‚ü©
  simp at *
  simp_rw [go]
  have h1 := exp_iter_deriv_within (k + 1) n (hK1 t.2)
  norm_cast at *
  simp at *
  rw [h1]
  simp
  have ineqe : ‚Äñ(Complex.exp (2 * œÄ * Complex.I * n * t))‚Äñ ‚â§ ‚Äñr‚Äñ ^ n :=
    by
    have hw1 :
      ‚Äñ (Complex.exp (2 * œÄ * Complex.I * n * t))‚Äñ =
        ‚Äñ (Complex.exp (2 * œÄ * Complex.I * t))‚Äñ ^ n := by
          norm_cast
          rw [‚Üê Complex.norm_pow];
          congr;
          rw [‚Üê exp_nat_mul];
          ring_nf
    rw [hw1]
    norm_cast
    apply pow_le_pow_left‚ÇÄ
    simp only [norm_nonneg]
    have :=
      BoundedContinuousFunction.norm_coe_le_norm
        (BoundedContinuousFunction.mkOfCompact (cts_exp_two_pi_n K)) t
    rw [norm_norm]
    simpa using this
  apply mul_le_mul
  simp
  simp at ineqe
  convert ineqe
  positivity
  positivity


theorem hasDerivAt_tsum_fun {Œ± : Type _} (f : Œ± ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ)
    {s : Set ‚ÑÇ} (hs : IsOpen s) (x : ‚ÑÇ) (hx : x ‚àà s)
    (hf : ‚àÄ y : ‚ÑÇ, y ‚àà s ‚Üí Summable fun n : Œ± => f n y)
    (hu :‚àÄ K ‚äÜ s, IsCompact K ‚Üí
          ‚àÉ u : Œ± ‚Üí ‚Ñù, Summable u ‚àß ‚àÄ (n : Œ±) (k : K), ‚Äñ(derivWithin (f n) s k)‚Äñ ‚â§ u n)
    (hf2 : ‚àÄ (n : Œ±) (r : s), DifferentiableAt ‚ÑÇ (f n) r) :
    HasDerivAt (fun z => ‚àë' n : Œ±, f n z) (‚àë' n : Œ±, derivWithin (fun z => f n z) s x) x :=
  by
  have A :
    ‚àÄ x : ‚ÑÇ,
      x ‚àà s ‚Üí
        Tendsto (fun t : Finset Œ± => ‚àë n ‚àà t, (fun z => f n z) x) atTop
          (ùìù (‚àë' n : Œ±, (fun z => f n z) x)) :=
    by
    intro y hy
    apply Summable.hasSum
    simp
    apply hf y hy
  apply hasDerivAt_of_tendstoLocallyUniformlyOn hs _ _ A hx
  use fun n : Finset Œ± => fun a => ‚àë i ‚àà n, derivWithin (fun z => f i z) s a
  rw [tendstoLocallyUniformlyOn_iff_forall_isCompact hs]
  intro K hK1 hK2
  have HU := hu K hK1 hK2
  obtain ‚ü®u, hu1, hu2‚ü© := HU
  apply tendstoUniformlyOn_tsum hu1
  intro n x hx
  apply hu2 n ‚ü®x, hx‚ü©
  filter_upwards
  intro t r hr
  apply HasDerivAt.fun_sum
  intro q hq
  apply HasDerivWithinAt.hasDerivAt
  apply DifferentiableWithinAt.hasDerivWithinAt
  apply (hf2 q ‚ü®r, hr‚ü©).differentiableWithinAt
  exact IsOpen.mem_nhds hs hr


theorem hasDerivWithinAt_tsum_fun {Œ± : Type _} (f : Œ± ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ)
    {s : Set ‚ÑÇ} (hs : IsOpen s) (x : ‚ÑÇ) (hx : x ‚àà s)
    (hf : ‚àÄ y : ‚ÑÇ, y ‚àà s ‚Üí Summable fun n : Œ± => f n y)
    (hu :
      ‚àÄ K ‚äÜ s, IsCompact K ‚Üí
          ‚àÉ u : Œ± ‚Üí ‚Ñù, Summable u ‚àß ‚àÄ (n : Œ±) (k : K), ‚Äñ(derivWithin (f n) s k)‚Äñ ‚â§ u n)
    (hf2 : ‚àÄ (n : Œ±) (r : s), DifferentiableAt ‚ÑÇ (f n) r) :
    HasDerivWithinAt (fun z => ‚àë' n : Œ±, f n z) (‚àë' n : Œ±, derivWithin (fun z => f n z) s x) s x :=
      by
  apply (hasDerivAt_tsum_fun f hs x hx hf hu hf2).hasDerivWithinAt




theorem iter_deriv_comp_bound3 (K : Set ‚ÑÇ) (hK1 : K ‚äÜ ‚Ñç') (hK2 : IsCompact K) (k : ‚Ñï) :
    ‚àÉ u : ‚Ñï ‚Üí ‚Ñù,
      Summable u ‚àß
        ‚àÄ (n : ‚Ñï) (r : K),
          (2 * |œÄ| * n) ^ k * ‚Äñ(Complex.exp (2 * ‚ÜëœÄ * Complex.I * n * r))‚Äñ ‚â§ u n :=
  by
  have : CompactSpace K := by
    rw [‚Üê isCompact_univ_iff]
    rw [isCompact_iff_isCompact_univ] at hK2
    apply hK2
  set r : ‚Ñù := ‚ÄñBoundedContinuousFunction.mkOfCompact (cts_exp_two_pi_n K )‚Äñ
  have hr : ‚ÄñBoundedContinuousFunction.mkOfCompact (cts_exp_two_pi_n K )‚Äñ < 1 :=
    by
    rw [BoundedContinuousFunction.norm_lt_iff_of_compact]
    intro x; rw [BoundedContinuousFunction.mkOfCompact_apply]; simp_rw [cts_exp_two_pi_n]
    simp only [ContinuousMap.coe_mk]
    apply exp_upperHalfPlane_lt_one ‚ü®x.1, hK1 x.2‚ü©; linarith
  have hr2 : 0 ‚â§ r := by apply norm_nonneg _
  have hu : Summable fun n : ‚Ñï => ‚Äñ((2 * ‚ÜëœÄ * Complex.I * n) ^ (k) * r ^ n)‚Äñ :=
    by
    have : ‚àÄ (n : ‚Ñï), ((2 * ‚ÜëœÄ)^(k))* ‚Äñ((n) ^ (k) * (r ^ n))‚Äñ =
      ‚Äñ((2 * ‚ÜëœÄ * Complex.I * n) ^ (k) * r ^ n)‚Äñ := by
        intro n
        norm_cast
        simp only [Nat.cast_pow, norm_mul, norm_pow, Real.norm_eq_abs,
          ofReal_mul, ofReal_ofNat, ofReal_pow, norm_ofNat, norm_real, norm_I,
          mul_one, norm_natCast]
        norm_cast
        simp only [Nat.cast_pow]
        have hh : |œÄ| = œÄ := by simp [Real.pi_pos.le]
        rw [hh]
        ring
    apply Summable.congr _ this
    rw [summable_mul_left_iff]
    apply summable_norm_pow_mul_geometric_of_norm_lt_one
    convert hr
    rw [norm_norm]
    norm_cast
    apply pow_ne_zero
    apply mul_ne_zero
    linarith
    apply Real.pi_ne_zero
  refine' ‚ü®fun n : ‚Ñï => ‚Äñ((2 * ‚ÜëœÄ * Complex.I * n) ^ (k) * r ^ n)‚Äñ, hu, _‚ü©
  intro n t
  simp
  have ineqe : ‚Äñ(Complex.exp (2 * œÄ * Complex.I * n * t))‚Äñ ‚â§ ‚Äñr‚Äñ ^ n :=
    by
    have hw1 :
      ‚Äñ (Complex.exp (2 * œÄ * Complex.I * n * t))‚Äñ =
        ‚Äñ (Complex.exp (2 * œÄ * Complex.I * t))‚Äñ ^ n := by
          norm_cast
          rw [‚Üê Complex.norm_pow];
          congr;
          rw [‚Üê exp_nat_mul];
          ring_nf
    rw [hw1]
    norm_cast
    apply pow_le_pow_left‚ÇÄ
    simp only [norm_nonneg]
    have :=
      BoundedContinuousFunction.norm_coe_le_norm
        (BoundedContinuousFunction.mkOfCompact (cts_exp_two_pi_n K)) t
    rw [norm_norm]
    simpa using this
  apply mul_le_mul
  simp
  simp at ineqe
  convert ineqe
  positivity
  positivity
