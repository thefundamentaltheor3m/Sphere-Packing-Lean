/-
The purpose of this file is to define the Eisenstein series we are interested in using more convenient notation.
-/

import Mathlib
-- import Mathlib.NumberTheory.ModularForms.EisensteinSeries.Defs

open ModularForm EisensteinSeries UpperHalfPlane TopologicalSpace Set MeasureTheory intervalIntegral
  Metric Filter Function Complex

open scoped Interval Real NNReal ENNReal Topology BigOperators Nat Classical

open ArithmeticFunction

local notation "SL(" n ", " R ")" => Matrix.SpecialLinearGroup (Fin n) R
noncomputable section Definitions

def standardcongruencecondition : Fin 2 ‚Üí ZMod ((1 : ‚Ñï+) : ‚Ñï) := 0



-- private lemma aux4 : (3 : ‚Ñ§) ‚â§ 4 := by norm_num
-- private lemma aux6 : (3 : ‚Ñ§) ‚â§ 6 := by norm_num

/- The Eisenstein Series E‚ÇÇ, E‚ÇÑ and E‚ÇÜ -/

def E‚ÇÑ : ModularForm (CongruenceSubgroup.Gamma ‚Üë1) 4 :=
  (1/2) ‚Ä¢ eisensteinSeries_MF (by norm_num) standardcongruencecondition /-they need  1/2 for the
    normalization to match up (since the sum here is taken over coprime integers).-/
def E (k : ‚Ñ§) (hk : 3 ‚â§ k) : ModularForm (CongruenceSubgroup.Gamma ‚Üë1) k :=
  (1/2) ‚Ä¢ eisensteinSeries_MF hk standardcongruencecondition /-they need  1/2 for the
    normalization to match up (since the sum here is taken over coprime integers).-/
def E‚ÇÜ : ModularForm (CongruenceSubgroup.Gamma ‚Üë1) 6 :=
  (1/2) ‚Ä¢ eisensteinSeries_MF (by norm_num) standardcongruencecondition

def S0 : Set ‚Ñ§ := {0}·∂ú

def G‚ÇÇ' : ‚Ñç ‚Üí ‚ÑÇ := fun z => ‚àë' (m : ‚Ñ§), (‚àë' (n : ‚Ñ§), 1 / (m * z + n) ^ 2) --hmm is this right?

/--Maybe this is the definition we want as I cant see how to easily show the other outer sum is
absolutely convergent. -/
def G‚ÇÇ : ‚Ñç ‚Üí ‚ÑÇ := fun z =>  2 * riemannZeta 2 + limUnder (atTop)
    (fun k : ‚Ñï+ => ‚àë m in Finset.range k, 2 ‚Ä¢ (‚àë' (n : ‚Ñ§), 1 / ((m + 1 : ‚ÑÇ) * z + n) ^ 2))

lemma G‚ÇÇ_eq1 (z : ‚Ñç) : G‚ÇÇ z = 2 * riemannZeta 2 +
  ‚àë' (m : ‚Ñï+), ‚àë' (n : ‚Ñ§), 1 / ((m : ‚ÑÇ) * z + n) ^ 2 := by
  rw [G‚ÇÇ]
  rw [Filter.Tendsto.limUnder_eq]
  simp
  rw [@NormedAddCommGroup.tendsto_atTop]
  --is this true?
  sorry

lemma fsb (b : ‚Ñï) : Finset.Ico (-(b+1) : ‚Ñ§) (b+1) = Finset.Ico (-(b : ‚Ñ§)) (b) ‚à™
    {-((b+1) : ‚Ñ§), (b : ‚Ñ§)} :=  by
  ext n
  simp
  omega


lemma PS1 (z : ‚Ñç) (m : ‚Ñ§) (hm : m ‚â† 0) : limUnder atTop
  (fun N : ‚Ñï => ‚àë n in (Finset.Ico (-(N : ‚Ñ§)) (N : ‚Ñ§)),
    (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1))) = 0 := by
  apply Filter.Tendsto.limUnder_eq
  rw [@NormedAddCommGroup.tendsto_nhds_zero]
  intro Œµ hŒµ
  simp only [  norm_eq_abs, eventually_atTop, ge_iff_le]
  use 0
  intro b hb
  have : ‚àë n in (Finset.Ico (-(b : ‚Ñ§)) (b : ‚Ñ§)),
    (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1)) = (1 / ((m : ‚ÑÇ) * z - b) -  1 / (m * z + b))  := by
    induction' b with b hB
    aesop
    simp only [Nat.cast_add, Nat.cast_one, Int.reduceNeg, one_div,
      Finset.sum_sub_distrib] at *
    rw [fsb]
    rw [Finset.sum_union]
    rw [Finset.sum_union]
    have := hB ?_



    all_goals{sorry}


  rw [this]
  simp [hŒµ]
  sorry

lemma ada (f : ‚Ñ§ ‚Üí ‚ÑÇ) (h : ‚àÄ i, f i = 0) : ‚àë' n, f n = 0 := by
  convert tsum_zero
  aesop


lemma PS2 (z : ‚Ñç) : ‚àë' m : S0, (limUnder atTop
  (fun N : ‚Ñï => ‚àë n in (Finset.Ico (-(N : ‚Ñ§)) (N : ‚Ñ§)),
    (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1)))) = 0 := by
    convert tsum_zero
    next m =>
    apply PS1
    apply m.2

lemma PS3 (z : ‚Ñç) (n : ‚Ñ§) : limUnder atTop
  (fun N : ‚Ñï => ‚àë m in (Finset.Ico (-(N : ‚Ñ§)) (N : ‚Ñ§)),
    ‚àë' m : ‚Ñï+, (1 / ((m : ‚ÑÇ) * z + n) -  1 / (m * z + n + 1))) = -2 * œÄ * Complex.I / z := by sorry

lemma G2_alt_eq (z : ‚Ñç) : --this sum is now abs convergent. Idea is to subtract PS1 from the G‚ÇÇ defn.
    G‚ÇÇ z = ‚àë' m : ‚Ñ§, ‚àë' n : ‚Ñ§, 1 / (((m : ‚ÑÇ)* z +n)^2 * (m * z + n +1))  := by
    rw [G‚ÇÇ]
    have :=  PS2 z

    sorry

/-This is proven in the modular forms repo. -/
lemma G2_summable_aux (n : ‚Ñ§) (z : ‚Ñç) (k : ‚Ñ§) (hk : 2 ‚â§ k) :
    Summable fun d : ‚Ñ§ => ((((n : ‚ÑÇ) * z) + d) ^ k)‚Åª¬π := by sorry

/-Check that we didnt define the zero function! -/
lemma G2'_summable (z : ‚Ñç) : Summable fun m : ‚Ñ§ =>  (‚àë' (n : ‚Ñ§), 1 / ((m : ‚ÑÇ) * z + n) ^ 2) := by
  --is this true??
  sorry


/-This is from the modforms repo, so no need to prove it. -/
theorem series_eql' (z : ‚Ñç) :
    ‚ÜëœÄ * Complex.I - 2 * ‚ÜëœÄ * Complex.I * ‚àë' n : ‚Ñï, Complex.exp (2 * ‚ÜëœÄ * Complex.I * z * n) =
      1 / z + ‚àë' n : ‚Ñï+, (1 / ((z : ‚ÑÇ) - n) + 1 / (z + n)) := sorry

/-This is from the modforms repo, so no need to prove it. -/
theorem q_exp_iden (k : ‚Ñï) (hk : 2 ‚â§ k) (z : ‚Ñç) :
    ‚àë' d : ‚Ñ§, 1 / ((z : ‚ÑÇ) + d) ^ k =
      (-2 * ‚ÜëœÄ * Complex.I) ^ k / (k - 1)! *
      ‚àë' n : ‚Ñï+, n ^ ((k - 1) ) * Complex.exp (2 * ‚ÜëœÄ * Complex.I * z * n) := sorry

def E‚ÇÇ : ‚Ñç ‚Üí ‚ÑÇ := (1 / (2 * riemannZeta 2)) ‚Ä¢  G‚ÇÇ

/-This result is already proven in the modular forms repo and being PRed (slowly) into mathlib, so
we can use it freely here. -/
lemma E_k_q_expansion (k : ‚Ñï) (hk : 3 ‚â§ (k : ‚Ñ§)) (hk2 : Even k) (z : ‚Ñç) :
    (E k hk) z = 1 +
        (1 / (riemannZeta (k))) * ((-2 * ‚ÜëœÄ * Complex.I) ^ k / (k - 1)!) *
        ‚àë' n : ‚Ñï+, sigma (k - 1) n * Complex.exp (2 * ‚ÜëœÄ * Complex.I * z * n) := by sorry

/--This we should get from the modular forms repo stuff. Will port these things soon. -/
lemma E‚ÇÇ_eq (z : UpperHalfPlane) : E‚ÇÇ z =
    1 - 24 * ‚àë' (n : ‚Ñï+),
    ‚Üën * cexp (2 * œÄ * Complex.I * n * z) / (1 - cexp (2 * œÄ * Complex.I * n * z)) := sorry

/-This should follow from the mod forms repo stuff. Will port soon. -/
lemma G‚ÇÇ_eq (z : UpperHalfPlane) : G‚ÇÇ z = (2 * riemannZeta 2) +
    8 * œÄ ^ 2 * ‚àë' (n : ‚Ñï+), (sigma 1 n) * cexp (2 * œÄ * Complex.I * n * z) := sorry

/-This is the annoying exercise. -/
lemma G‚ÇÇ_transform (z : ‚Ñç) (Œ≥ : SL(2, ‚Ñ§)) : (G‚ÇÇ ‚à£[(2 : ‚Ñ§)] Œ≥) z =
  G‚ÇÇ z - (2 * œÄ * Complex.I * Œ≥ 1 0) / (denom Œ≥ z) := sorry

/-Should be easy from the above.-/
lemma E‚ÇÇ_transform (z : ‚Ñç) (Œ≥ : SL(2, ‚Ñ§)) : (E‚ÇÇ ‚à£[(2 : ‚Ñ§)] ModularGroup.S) z =
  E‚ÇÇ z + 6 / ( œÄ * Complex.I * z) := sorry

lemma MultipliableDiscriminantProductExpansion : Multipliable (fun (z : UpperHalfPlane) =>
  cexp (2 * œÄ * Complex.I * z) * ‚àè' (n : ‚Ñï+), (1 - cexp (2 * œÄ * Complex.I * n * z)) ^ 24) := sorry

/- The discriminant form -/
def Œî (z : UpperHalfPlane) :=  cexp (2 * œÄ * Complex.I * z) * ‚àè' (n : ‚Ñï+),
    (1 - cexp (2 * œÄ * Complex.I * n * z)) ^ 24

/-This should be easy from the definition and the Mulitpliable bit. -/
lemma Œî_ne_zero (z : UpperHalfPlane) : Œî z ‚â† 0 := by sorry

/- The eta function. Best to define it on all of ‚ÑÇ since we want to take its logDeriv. -/
def Œ∑ (z : ‚ÑÇ) := cexp (œÄ * Complex.I * z / 24) * ‚àè' (n : ‚Ñï+),
    (1 - cexp (2 * œÄ * Complex.I * n * z))

lemma eta_disc (z : ‚Ñç) : (Œ∑ ^ 24) z = Œî z := by sorry

lemma eta_logDeriv (z : ‚Ñç) : logDeriv Œ∑ z = (œÄ * Complex.I / 12) * E‚ÇÇ z := sorry

/- œÜ‚ÇÄ, œÜ‚Çã‚ÇÇ and œÜ‚Çã‚ÇÑ, except we can't use - signs in subscripts for definitions... -/
def œÜ‚ÇÄ (z : UpperHalfPlane) := (((E‚ÇÇ z) * (E‚ÇÑ z) - (E‚ÇÜ z)) ^ 2) / (Œî z)
def œÜ‚ÇÇ' (z : UpperHalfPlane) := (E‚ÇÑ z) * ((E‚ÇÇ z) * (E‚ÇÑ z) - (E‚ÇÜ z)) / (Œî z)
def œÜ‚ÇÑ' (z : UpperHalfPlane) := ((E‚ÇÑ z) ^ 2) / (Œî z)
/- We extend these definitions to ‚ÑÇ for convenience. -/
def œÜ‚ÇÄ'' (z : ‚ÑÇ) : ‚ÑÇ := if hz : 0 < z.im then œÜ‚ÇÄ ‚ü®z, hz‚ü© else 0
def œÜ‚ÇÇ'' (z : ‚ÑÇ) : ‚ÑÇ := if hz : 0 < z.im then œÜ‚ÇÇ' ‚ü®z, hz‚ü© else 0
def œÜ‚ÇÑ'' (z : ‚ÑÇ) : ‚ÑÇ := if hz : 0 < z.im then œÜ‚ÇÑ' ‚ü®z, hz‚ü© else 0

end Definitions

noncomputable section Holomorphicity

-- Try and get the desired holomorphicity results for œÜ‚ÇÄ, œÜ‚ÇÇ and œÜ‚ÇÑ in terms of the E·µ¢

end Holomorphicity

noncomputable section Integrability

-- Here, we show that

end Integrability

open Complex Real

noncomputable section  Product_Formula
/-This one is easy.-/
lemma Discriminant_T_invariant : (Œî ‚à£[(12 : ‚Ñ§)] ModularGroup.T) = Œî := sorry

/-This is the hard one. -/
lemma Discriminant_S_invariant : (Œî ‚à£[(12 : ‚Ñ§)] ModularGroup.S) = Œî := sorry
-- use E‚ÇÇ_transform

def Discriminant_SIF : SlashInvariantForm (CongruenceSubgroup.Gamma 1) 12 where
  toFun := Œî
  slash_action_eq' A := by sorry

open Manifold in
lemma Discriminant_MDifferentiable : MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) Œî := sorry

lemma Discriminant_zeroAtImInfty (Œ≥ : SL(2, ‚Ñ§)): IsZeroAtImInfty (Œî ‚à£[(12 : ‚Ñ§)] Œ≥) := sorry

def CuspForm_div_Discriminant (k : ‚Ñ§) (f : CuspForm (CongruenceSubgroup.Gamma 1) k) (z : ‚Ñç) :
  ModularForm (CongruenceSubgroup.Gamma 1) (k - 12) where
    toFun := f  / Œî
    slash_action_eq' := sorry
    holo' := sorry --need to use the q-expansion to see that its still holo
    bdd_at_infty' := sorry


/-this is done in the modformdims repo, soon to be in mathlib.-/
lemma weigth_zero_rank_eq_one : Module.rank ‚ÑÇ (ModularForm (CongruenceSubgroup.Gamma 1) 0) = 1 :=
  by sorry

/-this is done in the modformdims repo, soon to be in mathlib.-/
lemma neg_weight_rank_zero (k : ‚Ñ§) (hk : k < 0) :
    Module.rank ‚ÑÇ (ModularForm (CongruenceSubgroup.Gamma 1) k) = 0 := by sorry

def CuspForms_iso_Modforms (k : ‚Ñ§) : CuspForm (CongruenceSubgroup.Gamma 1) k ‚âÉ‚Çó[‚ÑÇ]
    ModularForm (CongruenceSubgroup.Gamma 1) (k - 12) := sorry

theorem DiscriminantProductFormula (z : UpperHalfPlane) : Œî z = ((E‚ÇÑ z) ^ 3 - (E‚ÇÜ z) ^ 2) / 1728 := sorry
--enough to check its a cuspform, since if it is, then divining by Œî gives a modular form of weight 0.

lemma weight_two_empty (f : ModularForm (CongruenceSubgroup.Gamma 1) 2) : f = 0 := sorry
/- cant be a cuspform from the above, so let a be its constant term, then f^2 = a^2 E‚ÇÑ and
f^3 = a^3 E‚ÇÜ, but now this would mean that Œî = 0 or a = 0, which is a contradiction. -/

lemma dim_modforms_eq_one_add_dim_cuspforms (k : ‚Ñ§) (hk : 2 < k):
    Module.rank ‚ÑÇ (ModularForm (CongruenceSubgroup.Gamma 1) k) =
    1 + Module.rank ‚ÑÇ (CuspForm (CongruenceSubgroup.Gamma 1) k) := sorry

lemma dim_modforms_lvl_one (k : ‚Ñ§) :
    Module.rank ‚ÑÇ (ModularForm (CongruenceSubgroup.Gamma 1) k) = if 12 ‚à£ k - 2 then
    Nat.floor (k / 12) else Nat.floor (k / 12) + 1 := sorry

lemma dim_gen_cong_levels (k : ‚Ñ§) (Œì : Subgroup SL(2, ‚Ñ§)) (hŒì : Subgroup.index Œì ‚â† 0) :
    FiniteDimensional ‚ÑÇ (ModularForm Œì k) := by sorry
--use the norm to turn it into a level one question.


end Product_Formula

#min_imports
