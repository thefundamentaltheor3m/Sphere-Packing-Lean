import Mathlib.Analysis.CStarAlgebra.Classes
import Mathlib.Analysis.Calculus.Deriv.Inv
import Mathlib.Analysis.Calculus.Deriv.Pow
import Mathlib.Analysis.Complex.UpperHalfPlane.Basic
import Mathlib.Analysis.Normed.Order.Lattice
import Mathlib.Analysis.SpecialFunctions.ExpDeriv
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic


open UpperHalfPlane TopologicalSpace Set
  Metric Filter Function Complex

open scoped Interval Real NNReal ENNReal Topology BigOperators Nat Classical


theorem upper_ne_int (x : ‚Ñç) (d : ‚Ñ§) : (x : ‚ÑÇ) + d ‚â† 0 :=
  by
  by_contra h
  rw [add_eq_zero_iff_eq_neg] at h
  have h1 : 0 < (x : ‚ÑÇ).im := by simp only [coe_im]; exact im_pos x
  rw [h] at h1
  simp at h1


theorem aut_iter_deriv (d : ‚Ñ§) (k : ‚Ñï) :
    EqOn (iteratedDerivWithin k (fun z : ‚ÑÇ => 1 / (z + d)) {z : ‚ÑÇ | 0 < z.im})
      (fun t : ‚ÑÇ => (-1) ^ k * k ! * (1 / (t + d) ^ (k + 1))) {z : ‚ÑÇ | 0 < z.im} := by
  intro x hx
  induction' k with k IH generalizing x
  ¬∑ simp
  rw [iteratedDerivWithin_succ]
  simp only [one_div, Nat.cast_succ, Nat.factorial, Nat.cast_mul]
  have := (IH hx)
  have H : derivWithin (fun (z : ‚ÑÇ) => (-1: ‚ÑÇ) ^ k * ‚Üëk ! * ((z + ‚Üëd) ^ (k + 1))‚Åª¬π) {z : ‚ÑÇ | 0 <
    z.im} x =
   (-1) ^ (‚Üëk + 1) * ((‚Üëk + 1) * ‚Üëk !) * ((x + ‚Üëd) ^ (‚Üëk + 1 + 1))‚Åª¬π := by
    rw [DifferentiableAt.derivWithin]
    ¬∑ simp only [deriv_const_mul_field']
      have h‚ÇÅ : DifferentiableAt ‚ÑÇ (fun z : ‚ÑÇ => (z + ‚Üëd) ^ (k + 1)) x :=
        ((differentiableAt_fun_id).add_const _).pow (k + 1)
      have h‚ÇÇ : (x + ‚Üëd) ^ (k + 1) ‚â† 0 := pow_ne_zero (k + 1) (upper_ne_int ‚ü®x, hx‚ü© d)
      change (-1 : ‚ÑÇ) ^ k * (k ! : ‚ÑÇ) *
         deriv ((fun z : ‚ÑÇ => (z + ‚Üëd) ^ (k + 1))‚Åª¬π) x = _ at *
      rw [deriv_inv'' h‚ÇÅ h‚ÇÇ, ‚Üê pow_mul, pow_add, pow_one, mul_neg, mul_one, neg_mul]
      have Hw : -(((k: ‚ÑÇ) + 1) * (x + ‚Üëd) ^ k) / (x + ‚Üëd) ^ ((k + 1) * 2) = -(‚Üëk + 1) / (x + ‚Üëd) ^
        (k + 2) :=
        by
        rw [div_eq_div_iff]
        norm_cast
        simp
        ring
        norm_cast
        apply pow_ne_zero ((k + 1) * 2) (upper_ne_int ‚ü®x, hx‚ü© d)
        norm_cast
        apply pow_ne_zero (k + 2) (upper_ne_int ‚ü®x, hx‚ü© d)
      simp at *
      rw [Hw]
      ring
    ¬∑ apply DifferentiableAt.mul
      ¬∑ fun_prop
      ¬∑ apply DifferentiableAt.inv
        fun_prop
        apply pow_ne_zero (k + 1) (upper_ne_int ‚ü®x, hx‚ü© d)
    ¬∑ apply IsOpen.uniqueDiffWithinAt _ hx
      refine isOpen_lt ?_ ?_
      ¬∑ fun_prop
      ¬∑ fun_prop
  rw [‚ÜêH]
  apply derivWithin_congr
  norm_cast at *
  simp at *
  intro r hr
  apply IH hr
  norm_cast at *
  simp at *
  apply this

theorem aut_iter_deriv' (d : ‚Ñ§) (k : ‚Ñï) :
    EqOn (iteratedDerivWithin k (fun z : ‚ÑÇ => 1 / (z - d)) {z : ‚ÑÇ | 0 < z.im})
      (fun t : ‚ÑÇ => (-1) ^ k * k ! * (1 / (t - d) ^ (k + 1))) {z : ‚ÑÇ | 0 < z.im} :=
  by
  intro x hx
  have h1 : (fun z : ‚ÑÇ => 1 / (z - d)) = fun z : ‚ÑÇ => 1 / (z + -d) := by rfl
  rw [h1]
  have h2 : x - d = x + -d := by rfl
  simp_rw [h2]
  simpa using aut_iter_deriv (-d : ‚Ñ§) k hx

  theorem aut_contDiffOn (d : ‚Ñ§) (k : ‚Ñï) : ContDiffOn ‚ÑÇ k (fun z : ‚ÑÇ => 1 / (z - d))
    {z : ‚ÑÇ | 0 < z.im} := by
  simp only [one_div]
  apply ContDiffOn.inv
  apply ContDiffOn.sub
  apply contDiffOn_id
  apply contDiffOn_const
  intro x hx
  have := upper_ne_int ‚ü®x, hx‚ü© (-d)
  norm_cast at *
  simp at *
  rw [add_neg_eq_zero] at this
  rw [sub_eq_zero]
  convert this


theorem iter_div_aut_add (d : ‚Ñ§) (k : ‚Ñï) :
    EqOn (iteratedDerivWithin k (fun z : ‚ÑÇ => 1 / (z - d) + 1 / (z + d)) {z : ‚ÑÇ | 0 < z.im})
      ((fun t : ‚ÑÇ => (-1) ^ k * k ! * (1 / (t - d) ^ (k + 1))) + fun t : ‚ÑÇ =>
        (-1) ^ k * k ! * (1 / (t + d) ^ (k + 1))) {z : ‚ÑÇ | 0 < z.im} := by
  intro x hx
  have h1 :
    (fun z : ‚ÑÇ => 1 / (z - d) + 1 / (z + d)) =
      (fun z : ‚ÑÇ => 1 / (z - d)) + fun z : ‚ÑÇ => 1 / (z + d) :=
    by rfl
  rw [h1]
  simp only [one_div, Pi.add_apply] at *
  rw [iteratedDerivWithin_add hx ?_]
  ¬∑ have h2 := aut_iter_deriv d k hx
    have h3 := aut_iter_deriv' d k hx
    simp at *
    rw [h2, h3]
  ¬∑ have h4 := aut_contDiffOn d k
    simp at h4
    apply h4
    exact hx
  ¬∑ have h5 := aut_contDiffOn (-d) k
    simp at h5
    apply h5
    exact hx
  ¬∑ refine IsOpen.uniqueDiffOn ?_
    refine isOpen_lt ?_ ?_
    ¬∑ fun_prop
    ¬∑ fun_prop

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {F : Type*}
  [NormedAddCommGroup F] [NormedSpace ùïú F] (n : ‚Ñï) (f : ùïú ‚Üí F) (s : Set ùïú) (x : ùïú)


theorem iteratedDerivWithin_of_isOpen (hs : IsOpen s) :
    EqOn (iteratedDerivWithin n f s) (iteratedDeriv n f) s := by
  unfold iteratedDerivWithin iteratedDeriv
  intro x hx
  simp_rw [iteratedFDerivWithin_of_isOpen (ùïú := ùïú) (F := F) (E := ùïú) (f := f) n hs hx]



theorem exp_iter_deriv_within (n m : ‚Ñï) :
    EqOn (iteratedDerivWithin n (fun s : ‚ÑÇ => Complex.exp (2 * ‚ÜëœÄ * Complex.I * m * s)) {z : ‚ÑÇ | 0 <
      z.im})
      (fun t => (2 * ‚ÜëœÄ * Complex.I * m) ^ n * Complex.exp (2 * ‚ÜëœÄ * Complex.I * m * t)) {z : ‚ÑÇ | 0
        < z.im} :=
  by
  apply EqOn.trans (iteratedDerivWithin_of_isOpen _ _ _ ?_)
  rw [EqOn]
  intro x _
  apply congr_fun (iteratedDeriv_cexp_const_mul ..)
  refine isOpen_lt ?_ ?_
  ¬∑ fun_prop
  ¬∑ fun_prop
